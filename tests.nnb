{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# AGiXT Typescript SDK Tests\n\n## Get a list of Providers\n\nThis will get a list of AI Providers available to use with AGiXT.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst providers = await ApiClient.getProviders();\nconsole.log(providers);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'perplexity',  'gpt4free',",
                                "  'azure',       'chatgpt',",
                                "  'runpod',      'poe',",
                                "  'oobabooga',   'openai',",
                                "  'huggingface', 'pipeline',",
                                "  'fastchat',    'agixt',",
                                "  'palm',        'claude',",
                                "  'huggingchat', 'llamacppapi',",
                                "  'petal',       'kobold',",
                                "  'llamacpp',    'custom',",
                                "  'bard'",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get Default Provider Settings\n\nChoose a provider from the list of AI providers and get the default settings for that provider. For this example, we're choosing to see the settings for the `openai` provider.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst provider_settings = await ApiClient.getProviderSettings(\"openai\");\nconsole.log(provider_settings);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  OPENAI_API_KEY: '',",
                                "  AI_MODEL: 'gpt-3.5-turbo-16k-0613',",
                                "  AI_TEMPERATURE: 0.7,",
                                "  AI_TOP_P: 0.7,",
                                "  MAX_TOKENS: 16384,",
                                "  API_URI: 'https://api.openai.com/v1',",
                                "  WAIT_BETWEEN_REQUESTS: 1,",
                                "  WAIT_AFTER_FAILURE: 3,",
                                "  stream: 'false',",
                                "  provider: 'openai'",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get Embedding Providers\n\nEmbedding providers are used to embed information to vectors to store in the vector database to be searched for context injection.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst embedding_providers = await ApiClient.getEmbedProviders();\nconsole.log(embedding_providers);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'default',",
                                "  'azure',",
                                "  'openai',",
                                "  'google_palm',",
                                "  'google_vertex',",
                                "  'cohere'",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get Extension Settings\n\nThis is where we get all third party extension settings for the agent with defaults to fill in when there is nothing entered on the front end.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst extension_settings = await ApiClient.getExtensionSettings();\nconsole.log(extension_settings);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  macostts: { USE_MAC_OS_TTS: false },",
                                "  file_system: {",
                                "    WORKING_DIRECTORY: './WORKSPACE',",
                                "    WORKING_DIRECTORY_RESTRICTED: true",
                                "  },",
                                "  streamlabs_tts: { USE_STREAMLABS_TTS: true, STREAMLABS_VOICE: 'Brian' },",
                                "  whisper_stt: { WHISPER_MODEL: 'base.en' },",
                                "  huggingface: {",
                                "    HUGGINGFACE_API_KEY: '',",
                                "    HUGGINGFACE_AUDIO_TO_TEXT_MODEL: 'facebook/wav2vec2-large-960h-lv60-self'",
                                "  },",
                                "  discord: { DISCORD_API_KEY: '', DISCORD_COMMAND_PREFIX: '/AGiXT' },",
                                "  dalle: { OPENAI_API_KEY: '' },",
                                "  google: { GOOGLE_API_KEY: '' },",
                                "  github: { GITHUB_USERNAME: '', GITHUB_API_KEY: '' },",
                                "  stable_diffusion: {",
                                "    STABLE_DIFFUSION_API_URL: 'https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5',",
                                "    HUGGINGFACE_API_KEY: ''",
                                "  },",
                                "  gtts: { USE_GTTS: false },",
                                "  elevenlabs: { ELEVENLABS_API_KEY: '', ELEVENLABS_VOICE: 'Josh' },",
                                "  sendgrid_email: { SENDGRID_API_KEY: '', SENDGRID_EMAIL: '' },",
                                "  searxng: { SEARXNG_INSTANCE_URL: '' },",
                                "  twitter: {",
                                "    TW_CONSUMER_KEY: '',",
                                "    TW_CONSUMER_SECRET: '',",
                                "    TW_ACCESS_TOKEN: '',",
                                "    TW_ACCESS_TOKEN_SECRET: ''",
                                "  }",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get Extension Commands\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst extensions = await ApiClient.getExtensions();\nconsole.log(extensions);\nconsole.log(extensions[0]);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  {",
                                "    extension_name: 'Web Playwright',",
                                "    description: 'Web Playwright',",
                                "    settings: [],",
                                "    commands: [ [Object], [Object], [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Agixt Actions',",
                                "    description: 'Agixt Actions',",
                                "    settings: [],",
                                "    commands: [",
                                "      [Object], [Object],",
                                "      [Object], [Object],",
                                "      [Object], [Object],",
                                "      [Object], [Object]",
                                "    ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Macostts',",
                                "    description: 'Macostts',",
                                "    settings: [ 'USE_MAC_OS_TTS' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'File System',",
                                "    description: 'File System',",
                                "    settings: [ 'WORKING_DIRECTORY', 'WORKING_DIRECTORY_RESTRICTED' ],",
                                "    commands: [",
                                "      [Object], [Object],",
                                "      [Object], [Object],",
                                "      [Object], [Object],",
                                "      [Object], [Object],",
                                "      [Object]",
                                "    ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Streamlabs Tts',",
                                "    description: 'Streamlabs Tts',",
                                "    settings: [ 'USE_STREAMLABS_TTS', 'STREAMLABS_VOICE' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Whisper Stt',",
                                "    description: 'Whisper Stt',",
                                "    settings: [ 'WHISPER_MODEL' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Huggingface',",
                                "    description: 'Huggingface',",
                                "    settings: [ 'HUGGINGFACE_API_KEY', 'HUGGINGFACE_AUDIO_TO_TEXT_MODEL' ],",
                                "    commands: [ [Object], [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Discord',",
                                "    description: 'Discord',",
                                "    settings: [ 'DISCORD_API_KEY', 'DISCORD_COMMAND_PREFIX' ],",
                                "    commands: []",
                                "  },",
                                "  {",
                                "    extension_name: 'Dalle',",
                                "    description: 'Dalle',",
                                "    settings: [ 'OPENAI_API_KEY' ],",
                                "    commands: []",
                                "  },",
                                "  {",
                                "    extension_name: 'Google',",
                                "    description: 'Google',",
                                "    settings: [ 'GOOGLE_API_KEY' ],",
                                "    commands: []",
                                "  },",
                                "  {",
                                "    extension_name: 'Github',",
                                "    description: 'Github',",
                                "    settings: [ 'GITHUB_USERNAME', 'GITHUB_API_KEY' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Stable Diffusion',",
                                "    description: 'Stable Diffusion',",
                                "    settings: [ 'STABLE_DIFFUSION_API_URL', 'HUGGINGFACE_API_KEY' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Gtts',",
                                "    description: 'Gtts',",
                                "    settings: [ 'USE_GTTS' ],",
                                "    commands: []",
                                "  },",
                                "  {",
                                "    extension_name: 'Times',",
                                "    description: 'Times',",
                                "    settings: [],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Elevenlabs',",
                                "    description: 'Elevenlabs',",
                                "    settings: [ 'ELEVENLABS_API_KEY', 'ELEVENLABS_VOICE' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Sendgrid Email',",
                                "    description: 'Sendgrid Email',",
                                "    settings: [ 'SENDGRID_API_KEY', 'SENDGRID_EMAIL' ],",
                                "    commands: []",
                                "  },",
                                "  {",
                                "    extension_name: 'Searxng',",
                                "    description: 'Searxng',",
                                "    settings: [ 'SEARXNG_INSTANCE_URL' ],",
                                "    commands: [ [Object] ]",
                                "  },",
                                "  {",
                                "    extension_name: 'Twitter',",
                                "    description: 'Twitter',",
                                "    settings: [",
                                "      'TW_CONSUMER_KEY',",
                                "      'TW_CONSUMER_SECRET',",
                                "      'TW_ACCESS_TOKEN',",
                                "      'TW_ACCESS_TOKEN_SECRET'",
                                "    ],",
                                "    commands: []",
                                "  }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Details of Extension Commands\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst extensions = await ApiClient.getExtensions();\n// Example of data under commands for the Playwright extension.\nconsole.log(extensions[0].commands);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  {",
                                "    friendly_name: 'Scrape Text with Playwright',",
                                "    command_name: 'scrape_text_with_playwright',",
                                "    command_args: { url: '' }",
                                "  },",
                                "  {",
                                "    friendly_name: 'Scrape Links with Playwright',",
                                "    command_name: 'scrape_links_with_playwright',",
                                "    command_args: { url: '' }",
                                "  },",
                                "  {",
                                "    friendly_name: 'Take Screenshot with Playwright',",
                                "    command_name: 'take_screenshot_with_playwright',",
                                "    command_args: { url: '', path: '' }",
                                "  }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get command arguments\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst command_args = await ApiClient.getCommandArgs(\"Write to File\");\nconsole.log(command_args);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get a list of all current Agents\n\nAny agents that you have created will be listed here.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agents = await ApiClient.getAgents();\nconsole.log(agents);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  { name: 'FreeAgent', status: false },",
                                "  { name: 'gpt4free', status: false },",
                                "  { name: 'OpenOrca', status: false },",
                                "  { name: 'OpenOrca-13B', status: false },",
                                "  { name: 'easychat', status: false },",
                                "  { name: 'Vicuna', status: false },",
                                "  { name: 'OpenAI', status: false },",
                                "  { name: 'Starchat', status: false },",
                                "  { name: '[object Object]', status: false }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Create a new Agent\n\nCreates a new agent with the `openai` provider.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst new_agent = await ApiClient.addAgent(\"Test Agent\", {\n  provider: \"openai\",\n  embedder: \"openai\",\n  AI_MODEL: \"gpt-3.5-turbo-16k-0613\",\n  AI_TEMPERATURE: \"0.7\",\n  AI_TOP_P: \"1\",\n  MAX_TOKENS: \"16000\",\n  helper_agent_name: \"OpenAI\",\n  WEBSEARCH_TIMEOUT: 0,\n  OPENAI_API_KEY: \"YOUR_OPENAI_API_KEY_HERE\",\n  WAIT_BETWEEN_REQUESTS: 1,\n  WAIT_AFTER_FAILURE: 3,\n  stream: false,\n  WORKING_DIRECTORY: \"./WORKSPACE\",\n  WORKING_DIRECTORY_RESTRICTED: true,\n  AUTONOMOUS_EXECUTION: false,\n});\nconsole.log(new_agent);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ message: 'Agent Test Agent created.' }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Rename the test agent\n\nWe will just rename it to `New Test Agent`.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst rename_agent = await ApiClient.renameAgent(\n  \"Test Agent\",\n  \"New Test Agent\"\n);\nconsole.log(rename_agent);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ message: 'Agent renamed.' }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get the agent's settings\n\nThis will get the settings for the agent we just created, this will tell you all commands available to the agent as well as all of the provider settings for the agent.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agent_config = await ApiClient.getAgentConfig(\"New Test Agent\");\nconsole.log(agent_config);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  commands: {",
                                "    'Scrape Text with Playwright': false,",
                                "    'Scrape Links with Playwright': false,",
                                "    'Take Screenshot with Playwright': false,",
                                "    'Create Task Chain': false,",
                                "    'Generate Extension from OpenAPI': false,",
                                "    'Generate Agent Helper Chain': false,",
                                "    'Ask for Help or Further Clarification to Complete Task': false,",
                                "    'Create a new command': false,",
                                "    'Execute Python Code': false,",
                                "    'Get Python Code from Response': false,",
                                "    'Get Mindmap for task to break it down': false,",
                                "    'Speak with MacOS TTS': false,",
                                "    'Write to File': false,",
                                "    'Read File': false,",
                                "    'Search Files': false,",
                                "    'Append to File': false,",
                                "    'Execute Python File': false,",
                                "    'Delete File': false,",
                                "    'Execute Shell': false,",
                                "    'Indent String for Python Code': false,",
                                "    'Generate Commands Dictionary': false,",
                                "    'Speak with TTS with Streamlabs Text to Speech': false,",
                                "    'Read Audio from File': false,",
                                "    'Read Audio from File with Huggingface': false,",
                                "    'Read Audio with Huggingface': false,",
                                "    'Clone Github Repository': false,",
                                "    'Generate Image with Stable Diffusion': false,",
                                "    'Get Datetime': false,",
                                "    'Speak with TTS Using Elevenlabs': false,",
                                "    'Use The Search Engine': false",
                                "  },",
                                "  settings: {",
                                "    provider: 'openai',",
                                "    embedder: 'openai',",
                                "    AI_MODEL: 'gpt-3.5-turbo-16k-0613',",
                                "    AI_TEMPERATURE: '0.7',",
                                "    AI_TOP_P: '1',",
                                "    MAX_TOKENS: '16000',",
                                "    helper_agent_name: 'OpenAI',",
                                "    WEBSEARCH_TIMEOUT: 0,",
                                "    OPENAI_API_KEY: 'YOUR_OPENAI_API_KEY_HERE',",
                                "    WAIT_BETWEEN_REQUESTS: 1,",
                                "    WAIT_AFTER_FAILURE: 3,",
                                "    stream: false,",
                                "    WORKING_DIRECTORY: './WORKSPACE',",
                                "    WORKING_DIRECTORY_RESTRICTED: true,",
                                "    AUTONOMOUS_EXECUTION: false",
                                "  }",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Update the agent's settings\n\nWe'll just update the temperature from the default `0.7` to `0.8` to confirm that we can modify a setting.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agent_config = await ApiClient.getAgentConfig(\"New Test Agent\");\nagent_config.settings.AI_TEMPERATURE = \"0.8\";\nconst update_agent_config = await ApiClient.updateAgentSettings(\n  \"New Test Agent\",\n  agent_config.settings\n);\nconsole.log(update_agent_config);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Agent New Test Agent configuration updated.",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get a list of the agent's commands\n\nThis will get a list of all commands available to the agent.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agent_commands = await ApiClient.getCommands(\"New Test Agent\");\nconsole.log(agent_commands);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  'Scrape Text with Playwright': false,",
                                "  'Scrape Links with Playwright': false,",
                                "  'Take Screenshot with Playwright': false,",
                                "  'Create Task Chain': false,",
                                "  'Generate Extension from OpenAPI': false,",
                                "  'Generate Agent Helper Chain': false,",
                                "  'Ask for Help or Further Clarification to Complete Task': false,",
                                "  'Create a new command': false,",
                                "  'Execute Python Code': false,",
                                "  'Get Python Code from Response': false,",
                                "  'Get Mindmap for task to break it down': false,",
                                "  'Speak with MacOS TTS': false,",
                                "  'Write to File': false,",
                                "  'Read File': false,",
                                "  'Search Files': false,",
                                "  'Append to File': false,",
                                "  'Execute Python File': false,",
                                "  'Delete File': false,",
                                "  'Execute Shell': false,",
                                "  'Indent String for Python Code': false,",
                                "  'Generate Commands Dictionary': false,",
                                "  'Speak with TTS with Streamlabs Text to Speech': false,",
                                "  'Read Audio from File': false,",
                                "  'Read Audio from File with Huggingface': false,",
                                "  'Read Audio with Huggingface': false,",
                                "  'Clone Github Repository': false,",
                                "  'Generate Image with Stable Diffusion': false,",
                                "  'Get Datetime': false,",
                                "  'Speak with TTS Using Elevenlabs': false,",
                                "  'Use The Search Engine': false",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Toggle a Command for the Agent\n\nWe'll toggle the `Write to File` command to `true` to confirm that we can toggle a command.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst toggle_command = await ApiClient.toggleCommand(\n  \"New Test Agent\",\n  \"Write to File\",\n  true\n);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Update Agent Commands\n\nIn this example, we'll only change the `Write to File` command to `False`, but we could change any (or all) of the commands with this API call.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agent_config = await ApiClient.getAgentConfig(\"New Test Agent\");\n// Change agent_config.commands command of \"Write to File\" to false.\nagent_config.commands[\"Write to File\"] = false;\nconst update_agent_config = await ApiClient.updateAgentCommands(\n  \"New Test Agent\",\n  agent_config.commands\n);\nconsole.log(update_agent_config);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  'Scrape Text with Playwright': false,",
                                "  'Scrape Links with Playwright': false,",
                                "  'Take Screenshot with Playwright': false,",
                                "  'Create Task Chain': false,",
                                "  'Generate Extension from OpenAPI': false,",
                                "  'Generate Agent Helper Chain': false,",
                                "  'Ask for Help or Further Clarification to Complete Task': false,",
                                "  'Create a new command': false,",
                                "  'Execute Python Code': false,",
                                "  'Get Python Code from Response': false,",
                                "  'Get Mindmap for task to break it down': false,",
                                "  'Speak with MacOS TTS': false,",
                                "  'Write to File': false,",
                                "  'Read File': false,",
                                "  'Search Files': false,",
                                "  'Append to File': false,",
                                "  'Execute Python File': false,",
                                "  'Delete File': false,",
                                "  'Execute Shell': false,",
                                "  'Indent String for Python Code': false,",
                                "  'Generate Commands Dictionary': false,",
                                "  'Speak with TTS with Streamlabs Text to Speech': false,",
                                "  'Read Audio from File': false,",
                                "  'Read Audio from File with Huggingface': false,",
                                "  'Read Audio with Huggingface': false,",
                                "  'Clone Github Repository': false,",
                                "  'Generate Image with Stable Diffusion': false,",
                                "  'Get Datetime': false,",
                                "  'Speak with TTS Using Elevenlabs': false,",
                                "  'Use The Search Engine': false",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Create a new conversation\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst conversation = await ApiClient.newConversation(\n  \"New Test Agent\",\n  \"New Test Conversation\"\n);\nconsole.log(conversation);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get Conversations\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst conversations = await ApiClient.getConversations();\nconsole.log(conversations);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'Talk about chains',",
                                "  'AGiXT Conversation',",
                                "  'OpenAI History',",
                                "  'gpt4free conversation',",
                                "  'Stable diffusion chain',",
                                "  'Test',",
                                "  'AGiXT Chains',",
                                "  'Talk about AGiXT with OpenOrca'",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get Conversation Details\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst conversation = await ApiClient.getConversation(\n  \"gpt4free\",\n  \"Test\",\n  100,\n  1\n);\nconsole.log(conversation);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  {",
                                "    message: 'What can you tell me about AGiXT?',",
                                "    role: 'USER',",
                                "    timestamp: 'August 09, 2023 05:17 PM'",
                                "  },",
                                "  {",
                                "    message: 'AGiXT is a dynamic Artificial Intelligence Automation Platform designed to manage AI instruction and task execution across various providers. It uses adaptive memory handling and a wide range of commands to enhance AI understanding and responsiveness. AGiXT features Smart Instruct and Smart Chat, which integrate web search, planning strategies, and conversation continuity to improve task completion. It also supports multiple AI providers, code evaluation, comprehensive chain management, and platform interoperability. AGiXT aims to push the boundaries of AI and contribute to the development of Artificial General Intelligence (AGI).',",
                                "    role: 'OpenAI',",
                                "    timestamp: 'August 09, 2023 05:17 PM'",
                                "  }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Delete Message from Conversation\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Delete Conversation Message\nimport AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst conversation = await ApiClient.getConveration(\"gpt4free\", \"Test\", 100, 1);\nconst delete_message = await ApiClient.deleteConversationMessage(\n  \"gpt4free\",\n  \"Test\",\n  conversation[0].message\n);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete a Conversation\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst conversation = await ApiClient.deleteConversation(\"gpt4free\", \"Test\");\nconsole.log(conversation);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Have the Agent Learn from specified Text\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst text_learning = await ApiClient.learnText(\n  \"gpt4free\",\n  \"What is AGiXT?\",\n  \"AGiXT is an open-source artificial intelligence automation platform.\",\n  0\n);\nconsole.log(text_learning);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Have the Agent Learn from a File\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst file_learning = await ApiClient.learnFile(\n  \"gpt4free\",\n  \"text.txt\",\n  \"Test content of test.txt\",\n  0\n);\nconsole.log(file_learning);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Have the Agent Learn from a URL\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst url_learning = await ApiClient.learnUrl(\n  \"gpt4free\",\n  \"https://josh-xt.github.io/AGiXT/\",\n  0\n);\nconsole.log(url_learning);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get the Agents Memories\n\nGet some relevant memories from the agent about AGiXT.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Get Agent Memories\nimport AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst memories = await ApiClient.getAgentMemories(\n  \"gpt4free\",\n  \"What can you tell me about AGiXT?\",\n  5,\n  0.2,\n  0\n);\nconsole.log(memories);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Chat with the Agent\n\nChat about the learned information with the agent.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chat_response = await ApiClient.chat(\n  \"gpt4free\",\n  \"What can you tell me about AGiXT?\",\n  \"New Test Conversation\",\n  6\n);\nconsole.log(chat_response);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete a Memory\n\nDelete a specific memory by Memory ID.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst memories = await ApiClient.getAgentMemories(\n  \"gpt4free\",\n  \"What can you tell me about AGiXT?\",\n  1,\n  0.2,\n  0\n);\n// Get the last memory id\nconst memory_id = memories[0].id;\nconst delete_memory = await ApiClient.deleteAgentMemory(\n  \"gpt4free\",\n  memory_id,\n  0\n);\nconsole.log(delete_memory);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Wipe the agents memories\n\nThis is necessary if you want the agent to serve a different purpose than its original intent after it has learned things. It may inject unnecessary context into the conversation if you don't wipe its memory and try to give it a different purpose, even temporarily.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst wipe_memories = await ApiClient.wipeAgentMemories(\"gpt4free\", 0);\nconsole.log(wipe_memories);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Instruct the Agent to do something\n\nWe'll do something simple with it for the sake of the basic example, we'll just tell it to `Tell me the capital of France`.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst instruction = await ApiClient.instruct(\n  \"gpt4free\",\n  \"Save a file with the the capital of France in it called 'france.txt'.\",\n  \"New Test Conversation\"\n);\nconsole.log(instruction);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Prompt the Agent\n\nUse a custom Prompt Template to prompt the agent. For our example, we'll use our \"Write a Poem\" prompt template to have the agent write a poem for us about dragons.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompt_name = \"Write a Haiku\";\nconst prompt_args = {\n  user_input: \"Show me 2.\",\n  subject: \"dragons\",\n  websearch: false,\n  websearch_depth: 0,\n  context_results: 0,\n  shots: 1,\n  conversation_name: \"Talk for Tests\",\n};\nconst agent_prompt = await ApiClient.promptAgent(\n  \"gpt4free\",\n  prompt_name,\n  prompt_args\n);\nconsole.log(agent_prompt);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get a list of Chains available to use\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chains = await ApiClient.getChains();\nconsole.log(chains);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Create a new chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.addChain(\"Write another Poem\");\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Rename the chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.renameChain(\n  \"Write anotehr Poem\",\n  \"Poem Writing Chain\"\n);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Add Chain Steps\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst add_step1 = await ApiClient.addStep(\n  \"Poem Writing Chain\",\n  1,\n  \"gpt4free\",\n  \"Prompt\",\n  { prompt_name: \"Write a Poem\", subject: \"Artificial Intelligence\" }\n);\nconsole.log(add_step1);\nconst add_step2 = await ApiClient.addStep(\n  \"Poem Writing Chain\",\n  2,\n  \"gpt4free\",\n  \"Prompt\",\n  { prompt_name: \"Write a Poem\", subject: \"Quantum Computers\" }\n);\nconsole.log(add_step2);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get the content of the chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.getChain(\"Poem Writing Chain\");\nconsole.log(chain.steps);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get Chain Arguments\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.getChainArgs(\"Smart Chat\");\nconsole.log(chain);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'user_input', 'shot_count', 'task' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Modify a Chain Step\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.updateStep(\n  \"Poem Writing Chain\",\n  1,\n  \"gpt4free\",\n  \"Prompt\",\n  { prompt_name: \"Write a Poem\", subject: \"Artificial General Intelligence\" }\n);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Move a Chain Step\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.moveStep(\"Poem Writing Chain\", 1, 2);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete a step from the chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.deleteStep(\"Poem Writing Chain\", 2);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Add a Command to the Chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.addStep(\n  \"Poem Writing Chain\",\n  2,\n  \"gpt4free\",\n  \"Command\",\n  {\n    command_name: \"Write to File\",\n    filename: \"{user_input}.txt\",\n    text: \"Poem:\\n{STEP1}\",\n  }\n);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Run the chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain_args = {\n  conversation_name: \"Talk for Tests\",\n};\nconst chain = await ApiClient.runChain(\n  \"Poem Writing Chain\",\n  \"Super Poems\",\n  \"gpt4free\",\n  false,\n  1,\n  chain_args\n);\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get the responses from the chain running\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain_response = await ApiClient.getChainResponses(\"Poem Writing Chain\");\nconsole.log(chain_response);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete the chain\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst chain = await ApiClient.deleteChain(\"Poem Writing Chain\");\nconsole.log(chain);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get a list of prompts available to use\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompts = await ApiClient.getPrompts();\nconsole.log(prompts);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'Pseudo Code',",
                                "  'Chat with Commands',",
                                "  'Convert OpenAPI Endpoint',",
                                "  'Ask for Help',",
                                "  'SmartInstruct-Researcher',",
                                "  'Custom Input',",
                                "  'Title a Poem',",
                                "  'ValidationFailed',",
                                "  'SmartTask-CleanResponse',",
                                "  'Create a Skeleton',",
                                "  'Proofreader',",
                                "  'SmartChat-Researcher',",
                                "  'Evaluate Code',",
                                "  'Get ezsession Auth Type',",
                                "  'Expert Determination',",
                                "  'Tell Me How',",
                                "  'New Extension Format',",
                                "  'Execution',",
                                "  'Score Response',",
                                "  'Get Task Description',",
                                "  'Validation',",
                                "  'Write a Haiku',",
                                "  'SmartInstruct-Resolver',",
                                "  'SmartInstruct-CleanResponse',",
                                "  'AGiXT SD Generator_V3',",
                                "  'Translate Math to Python',",
                                "  'SmartInstruct-StepByStep',",
                                "  'instruct',",
                                "  'Pick a Poem Subject',",
                                "  'Task Execution',",
                                "  'Prompt Generator',",
                                "  'Check-Instruction',",
                                "  'Mindmap',",
                                "  'Get Clarification',",
                                "  'SmartTask-Execution',",
                                "  'SmartChat-Resolver',",
                                "  'Chat',",
                                "  'Create New Command',",
                                "  'SmartChat-CleanResponse',",
                                "  'Prioritize',",
                                "  'Pick-a-Link',",
                                "  'SmartInstruct-Execution',",
                                "  'Write a Poem',",
                                "  'JSONFormatter',",
                                "  'SmartTask-StepByStep',",
                                "  'Title a Chain',",
                                "  'Instruction',",
                                "  'WebSearch',",
                                "  'SmartChat-StepByStep',",
                                "  'Summarize Web Content',",
                                "  'Get Task List',",
                                "  'Break into steps'",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Get the content of a prompt\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompt_data = await ApiClient.getPrompt(\"Chat\");\nconsole.log(prompt_data);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                " {context} ",
                                "You are {agent_name}, an expert at answering the users question.  Use available context help answer the users questions.",
                                "",
                                "Recent conversation history for context: ",
                                " {conversation_history} ",
                                "",
                                "User's latest input: {user_input} ",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Create a new prompt\n\nWe'll make a basic prompt that asks the AI to tell us a short story about a subject. The subject is not yet defined, it would be defined in a chain. Using `{variable_name}` in a prompt will allow you to define the variable in a chain and have it be used in the prompt.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst new_prompt = await ApiClient.addPrompt(\n  \"Short Story\",\n  \"Tell me a short story about {subject}\",\n  \"Default\"\n);\nconsole.log(new_prompt);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Get the prompt variables\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompt_args = await ApiClient.getPromptArgs(\"Short Story\", \"Default\");\nconsole.log(prompt_args);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Update the prompt content\n\nWe'll ask it to `Add a dragon to the story somehow` in the prompt to make the short story more interesting.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompt = await ApiClient.updatePrompt(\n  \"Short Story\",\n  \"Tell me a short story about {subject} and make it funny.\",\n  \"Default\"\n);\nconsole.log(prompt);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete the prompt\n\nIf you don't want the prompt anymore, delete it.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst prompt = await ApiClient.deletePrompt(\"Short Story\", \"Default\");\nconsole.log(prompt);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete the Agent\n\nIf you are done with the agent and don't want or need it anymore, you can delete it along with everything associated with it, such as its memories, settings, and history. The Agent isn't just fired, it is dead.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import AGiXTSDK from \"./index.ts\";\nconst ApiClient = new AGiXTSDK({\n  baseUri: \"http://localhost:7437\",\n  apiKey: \"\",\n});\nconst agent = await ApiClient.deleteAgent(\"New Test Agent\");\nconsole.log(agent);\n"
            ],
            "outputs": []
        }
    ]
}